В проекте создадим папку BackEnd и в ней:
	dotnet new sln --name ProjectName
	dotnet new webapi -o API
	dotnet sln add API
	dotnet new classlib -o Core
	dotnet new classlib -o Infrastructure
	dotnet sln add Core
	dotnet sln add Infrastructure
	dotnet add reference ..\Core\ (из папки Infrastructure)
	dotnet add reference ..\Core\ (из папки Api)
	dotnet add reference ..\Infrastructure\ (из папки Api)

API - все, что непосредственно касается логики работы API:
	Controllers
	Mappers
	Middleware
	И другое, что может описывать *логику*.
Core - сущности и интерфейсы, с которыми мы работаем
	Entities 
	Interfaces
	Specifications
	И другие *объекты*
Infrastructure - все, что непосредственно касается базы данных.
	Migrations
	SeedData
	Repositories
	И другое, что может потребоваться для работы с *базой данных*

Установка EntityFrameworkCore.Sqlite:
Проверяем версию .net:
	dotnet --info
Через nuget установить версию EntityFrameworkCore.Sqlite, которая равна версии .net.
Устанавливаем в API и Infrastructure.

Устанавливаем dotnet-ef той же версии, что и .net.
Устанавливаем в API и Infrastructure.

Устанавливаем Microsoft.EntityFrameworkCore.Design той же версии, что и .net.
Устанавливаем в API и Infrastructure.

В Core создаем папку Entities и добавляем туда BaseEntity, который содержит только Id,
а затем другие сущности, которые будут использоваться в БД.

В Infrastructure создаем папку Data.
Создаем ShelterContext.cs.
Унаследуемся от DbContext. 
Конструктор: 
	public ShelterContext(DbContextOptions<ShelterContext> options) : base(options)
        {
        }
Также обязательно добавить пустой конструтор, иначе будут ошибки при создании migration:
	public ShelterContext() : base() { }
Его нужно поместить в начало.

Должны указать, что DbContextOptions типа ShelterContext.

Иерархия:
	Table Animals - содержит два поля:
		string CollectionName
		IEnumerable<Breed> Breeds
	Пример: коллекция Кошки, которая хранит в себе список пород: Сфинкс, Британец и т.д.
	Table Breed - содержит четыре поля:
		string BreedName
		IEnumerable<Pet> Pets
		Animals Animals
		int AnimalId
	Пример: Порода Сфинкс, которая хранит в себе список нескольких домашних животных: Дуся и Муся.
	Animals Animals - является навигационным свойством, как и int AnimalsId.
	Table Pet - содержит всю информацию о конкретном домашнем животном. 
	
Добавим DbSet для необходимых коллекций:
        public DbSet<Pet>? Pets { get; set; }
        public DbSet<Location>? Locations { get; set; }
        public DbSet<Animal>? Animals { get; set; }
        public DbSet<Breed>? Breeds {get; set;}

В appsettings.Development.json *под* полем Logging добавим:
  "ConnectionStrings": {
    "DefaultConnection" : "Data source=kindShelter.db"
  }
Для конфигурации Sqlite.

Зарегистрируем сервис: 

string? ConnectionString = builder.Configuration.GetConnectionString("DefaultConnection");
services.AddDbContext<ShelterContext>(
      dbcontextOptions => dbcontextOptions.UseSqlite(ConnectionString), 
      b => b.MigrationsAssembly("Infrastructure")
);

b => b.MigrationsAssembly("Infrastructure") 
Указывает, куда будут помещаться все migrations.

Далее из папки Infrastructure:
	dotnet ef --startup-project ..\API\ migrations add InitialCreate -o Data/Migraions
Обязательно надо указать --startup-project ..\API\, так как именно в этом проекте регистрируется зависимость.
Чтобы удалить migrations
	dotnet ef --startup-project ..\API\ migrations remove

Также из папки Infrastructure можно создать базу данных:
	dotnet ef --startup-project ..\API\ database update

В Infrastructure добавим папку DatabaseConfiguration в ней создадим конфигурации на каждый сет:
	AnimalsSetConfiguration.cs
	AnimalTypesSetConfiguration.cs
 	LocationSetConfiguration.cs

Пример AnimalConfiguration.cs:
	
    public class AnimalConfiguration : IEntityTypeConfiguration<Animal>
    {
        public void Configure(EntityTypeBuilder<Animal> builder)
        {
            builder.Property(breed => breed.AnimalName).IsRequired();
            builder
                .HasMany(breed => breed.Breeds)
                .WithOne(breed => breedType.Animal)
                .HasForeignKey(breedType => breedType.AnimalId);
        }
    }

Так как каждый Animal хранит в себе список Breed, то нужно указать это через
метод HasMany, и указать чего именно много имеется.
Через метод WithOne указываем на навигационный параметр (то есть указываем на Animal из Breed).
И через HasForeignKey указываем на id Animal.

Примечание: Если затем в репозитории указать Includ`ы на коллекции чего-либо а затем попытаться
их вернуть, то будет ошибка
	System.Text.Json.JsonException: A possible object cycle was detected. 
	This can either be due to a cycle or if the object depth is larger than the maximum allowed depth 
	of 32.
, чтобы ее избежать надо добавть:
	    services
            .AddControllers()
            .AddJsonOptions(options =>
            {
                options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
                options.JsonSerializerOptions.WriteIndented = true;
            });
Однако если возвращать значения через DTO, то этой ошибки не будет. 

https://metanit.com/sharp/efcore/3.4.php ^^^

Для применения конфигураций нужно перезаписать метод OnModelCreating:

      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
            base.OnModelCreating(modelBuilder);
            modelBuilder.ApplyConfiguration(new PetConfiguration());
            modelBuilder.ApplyConfiguration(new AnimalConfiguration());
            modelBuilder.ApplyConfiguration(new BreedConfiguration());
            modelBuilder.ApplyConfiguration(new LocationConfiguration());
      }

Чтобы переименовать таблицу в БД:
	ALTER TABLE 'Foo' RENAME TO 'Bar'

Далее в Infrastructure\Data\Repositories
Создаем IShelterRepository и ShelterRepository.

В IShelterRepository добавляем методы, которые нужно будет реализовать в ShelterRepository:
	Task<IEnumerable<Pet>> GetPets();
        Task<IEnumerable<Animal>> GetAnimals();
        Task<IEnumerable<Breed>> GetBreeds();
В ShelterRepository в конструкторе внедряем ShelterContext. 
Реализовываем эти методы в ShelterRepository:
Пример на одном методе GetPets():

        private readonly ShelterContext _context;
        private readonly ILogger<ShelterRepository> _logger;

        public ShelterRepository(ShelterContext context, ILogger<ShelterRepository> logger)
        {
            _context = context;
            _logger = logger;
        }

        public async Task<IEnumerable<Pet>> GetPets()
        {
            IEnumerable<Pet> pets = new List<Pet>();
            try
            {
                pets = await _context.Pets!
                    .Include(pet => pet.Breed)
                    .ThenInclude(x => x!.Animal)
                    .Include(pet => pet.Location)
                    .ToListAsync();
            }
            catch (System.Exception ex)
            {
                _logger.LogError(ex, ex.Message);
            }

            return pets;
        }

Регистрируем сервис в Program.cs:
	 services.AddScoped<IShelterRepository, ShelterRepository>();

В контроллере внедряем *IShelterRepository* - именно интерфейс, иначе будет ошибка. 
И описываем endpoints API:

        private readonly IShelterRepository _repository;

        public ShelterController(IShelterRepository repository)
        {
            _repository = repository;
        }

        [HttpGet("pets")]
        public async Task<ActionResult<IEnumerable<Pet>>> GetAnimals()
        {
            return Ok(await _repository.GetPets());
        }

Добавление Automapper'а:
Из nuget gallety установить в API 
	AutoMapper.Extensions.Microsoft.DependencyInjection

Создадим PetDTO:

    public record PetDTO
    {
        public PetDTO(string city, string? street, int? house, int? flatNumber)
        {
            Location = new LocationDTO()
            {
                City = city,
                Street = street,
                FlatNumber = flatNumber,
                House = house
            };
        }

        public string Name { get; init; } = string.Empty;
        public bool? HasVaccines { get; init; } = null;
        public string PictureUrl { get; init; } = string.Empty;
        public int Age { get; init; } = 1;
        public string Gender { get; init; } = string.Empty;
        public string Color { get; init; } = string.Empty;
        public string Breed { get; init; } = string.Empty;
        public string AnimalType { get; init; } = string.Empty;
        public LocationDTO Location { get; private set; }
    }

Далее создадим профиль маппера для этого DTO: 
   
    public class PetMapProfile : Profile
    {
        public PetMapProfile()
        {
            CreateMap<Pet, PetDTO>()
                .ConstructUsing(
                    pet =>
                        new PetDTO(
                            pet.Location!.City,
                            pet.Location!.Street,
                            pet.Location!.House,
                            pet.Location!.FlatNumber
                        )
                )
                .ForMember(
                    petDto => petDto.Breed,
                    options => options.MapFrom(pet => pet.Breed!.BreedName)
                )
                .ForMember(
                    petDto => petDto.AnimalType,
                    options => options.MapFrom(pet => pet.Breed!.Animals!.CollectionName)
                );
        }
    }

Чтобы воспользоваться конструктором в PetDTO нужно воспользоваться .ConstructUsing() и 
создать новый record PetDTO.

Регистрируем все профили маппера в Program.cs через reflection:
        
	services.AddAutoMapper(
            typeof(PetMapProfile),
            typeof(LocationMapProfile),
            typeof(BreedMapProfile),
            typeof(AnimalMapProfile)
        );